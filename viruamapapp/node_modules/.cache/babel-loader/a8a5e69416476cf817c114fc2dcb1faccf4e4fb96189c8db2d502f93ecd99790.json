{"ast":null,"code":"import world from '../map/js/world';\nimport jsonp from \"jsonp\";\nlet option = {\n  title: {\n    text: \"疫情地图\",\n    //图表 标题\n    x: \"center\",\n    textStyle: {\n      color: \"red\"\n    }\n  },\n  toolbox: {\n    //工具栏\n    feature: {\n      saveAsImage: {} //保存图片\n    }\n  },\n\n  tooltip: {\n    //提示信息\n    trigger: \"item\",\n    //类型\n    formatter: \"地图：{b}<br/>确诊：{c}\"\n  },\n  series: [\n  //数据\n  {\n    type: \"map\",\n    //图表类型 是地图\n    map: \"china\",\n    //中国地图\n    zoom: 1.2,\n    //缩放比例\n    roam: true,\n    data: [],\n    label: {\n      //图形上的文本标签，可用于说明图形的一些数据信息\n      show: true,\n      color: \"#eee\",\n      fontSize: 10\n    },\n    emphasis: {\n      //输入表移入的显示情况\n      label: {\n        //图形上的文本标签，可用于说明图形的一些数据信息\n        show: true,\n        color: \"#ffffff\",\n        //鼠标移入文字颜色\n        fontSize: 16\n      },\n      itemStyle: {\n        show: true,\n        areaColor: \"#ccc\" //鼠标移入背景颜色\n      }\n    },\n\n    itemStyle: {\n      backgroundColor: \"red\",\n      borderColor: \"#eee\",\n      borderWidth: 1,\n      borderType: \"solid\",\n      areaColor: \"#ccc\"\n    }\n  }],\n  visualMap: {\n    //视觉映射组件 --侧边柱子\n    type: \"piecewise\",\n    //piecewise 点状视觉映射组件，continuous 直线状视觉映射组件\n    // min: 8, //最低多少\n    // max: 500, //最高多少\n    // text: [\"High\", \"Low\"], //高低处文本\n    // realtime: true, // 拖拽时，是否实时更新\n    // calculable: true, //是否显示拖拽用的手柄（手柄能拖拽调整选中范围）\n    itemWidth: 10,\n    //每个方块的宽度\n    itemHeight: 20,\n    //每个方块的高度\n    inRange: {\n      //范围\n      color: [\"#d0ddec\", \"#42b983\", \"red\"] //高中低处的颜色\n    },\n\n    pieces: [{\n      min: 400\n    },\n    // 不指定 max，表示 max 为无限大（Infinity）。\n    {\n      min: 80,\n      max: 300\n    }, {\n      min: 60,\n      max: 79\n    }, {\n      min: 20,\n      max: 59\n    }, {\n      min: 1,\n      max: 19\n    },\n    // { value: 123, label: \"123（自定义特殊颜色）\", color: \"grey\" },  // 表示 value 等于 123 的情况。\n    {\n      value: 0\n    }]\n  }\n};\nexport default {\n  name: 'glomap',\n  data() {\n    return {\n      url: \"http://localhost:8081/data\",\n      value: \"world\",\n      myChart: null,\n      //   注册地图json\n      jsonMap: {\n        'world': world\n      }\n\n      // 全球地域中文映射\n    };\n  },\n\n  mounted() {\n    this.getData();\n    this.chinaConfigure(this.value);\n  },\n  //   更新数据\n  watch: {\n    value(newVal) {\n      this.myChart.dispose();\n      this.getData();\n      this.chinaConfigure(this.value);\n    }\n  },\n  beforeDestroy() {\n    if (!this.myChart) {\n      return;\n    }\n    this.myChart.dispose();\n    this.myChart = null;\n  },\n  methods: {\n    chinaConfigure(area) {\n      this.myChart = this.$echarts.init(document.getElementById(\"charts\")); //这里是为了获得容器所在位置        \n      window.onresize = this.myChart.resize;\n      let option = {\n        // 进行相关配置\n        backgroundColor: \"#02AFDB\",\n        tooltip: {},\n        // 鼠标移到图里面的浮动提示框\n        visualMap: {\n          // max: 110,\n          calculable: true,\n          inRange: {\n            color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n          }\n        },\n        series: [{\n          type: 'map',\n          map: 'world',\n          data: [],\n          nameMap: this.nameMap\n        }]\n      };\n      this.myChart.setOption(option, true);\n      this.myChart.on('click', params => {\n        // 点击函数\n        this.value = params.name;\n        this.myChart.setOption(option, true);\n      });\n    },\n    getData() {\n      var that = this;\n      jsonp(that.url, (err, data) => {\n        // jsonp 在请求创建script标签发送，不受同源策略影响\n        // console.log(data.data.list);\n        let arr = data.data.list;\n        let lists = arr.map(function (e) {\n          return {\n            name: e.location,\n            value: e.nowdia\n          };\n        });\n        option.series[0].data = lists;\n        that.init();\n      });\n    }\n  }\n};","map":{"version":3,"names":["world","jsonp","option","title","text","x","textStyle","color","toolbox","feature","saveAsImage","tooltip","trigger","formatter","series","type","map","zoom","roam","data","label","show","fontSize","emphasis","itemStyle","areaColor","backgroundColor","borderColor","borderWidth","borderType","visualMap","itemWidth","itemHeight","inRange","pieces","min","max","value","name","url","myChart","jsonMap","mounted","getData","chinaConfigure","watch","newVal","dispose","beforeDestroy","methods","area","$echarts","init","document","getElementById","window","onresize","resize","calculable","nameMap","setOption","on","params","that","err","arr","list","lists","e","location","nowdia"],"sources":["src/components/glomap.vue"],"sourcesContent":["\n<template>\n    <div style=\"height:500px;width:100%\" id=\"charts\"></div>\n</template>\n\n<script>\nimport world from '../map/js/world'\nimport jsonp from \"jsonp\";\nlet option = {\n  title: {\n    text: \"疫情地图\", //图表 标题\n    x: \"center\",\n    textStyle: {\n      color: \"red\"\n    }\n  },\n  toolbox: {\n    //工具栏\n    feature: {\n      saveAsImage: {} //保存图片\n    }\n  },\n  tooltip: {\n    //提示信息\n    trigger: \"item\", //类型\n    formatter: \"地图：{b}<br/>确诊：{c}\"\n  },\n  series: [\n    //数据\n    {\n      type: \"map\", //图表类型 是地图\n      map: \"china\", //中国地图\n      zoom: 1.2, //缩放比例\n      roam: true,\n      data: [],\n      label: {\n        //图形上的文本标签，可用于说明图形的一些数据信息\n        show: true,\n        color: \"#eee\",\n        fontSize: 10\n      },\n      emphasis: {\n        //输入表移入的显示情况\n        label: {\n          //图形上的文本标签，可用于说明图形的一些数据信息\n          show: true,\n          color: \"#ffffff\", //鼠标移入文字颜色\n          fontSize: 16\n        },\n        itemStyle: {\n          show: true,\n          areaColor: \"#ccc\" //鼠标移入背景颜色\n        }\n      },\n      itemStyle: {\n        backgroundColor: \"red\",\n        borderColor: \"#eee\",\n        borderWidth: 1,\n        borderType: \"solid\",\n        areaColor: \"#ccc\"\n      }\n    }\n  ],\n\n  visualMap: {\n    //视觉映射组件 --侧边柱子\n    type: \"piecewise\", //piecewise 点状视觉映射组件，continuous 直线状视觉映射组件\n    // min: 8, //最低多少\n    // max: 500, //最高多少\n    // text: [\"High\", \"Low\"], //高低处文本\n    // realtime: true, // 拖拽时，是否实时更新\n    // calculable: true, //是否显示拖拽用的手柄（手柄能拖拽调整选中范围）\n    itemWidth: 10, //每个方块的宽度\n    itemHeight: 20, //每个方块的高度\n    inRange: {\n      //范围\n      color: [\"#d0ddec\", \"#42b983\", \"red\"] //高中低处的颜色\n    },\n    pieces: [\n      { min: 400 }, // 不指定 max，表示 max 为无限大（Infinity）。\n      { min: 80, max: 300 },\n      { min: 60, max: 79 },\n      { min: 20, max: 59 },\n      { min: 1, max: 19 },\n      // { value: 123, label: \"123（自定义特殊颜色）\", color: \"grey\" },  // 表示 value 等于 123 的情况。\n      { value: 0 }\n    ]\n  }\n};\nexport default {\n    name:'glomap',\n   data(){\n    return {\n      url:\"http://localhost:8081/data\",\n      value: \"world\",\n      myChart:null,\n    //   注册地图json\n       jsonMap: {\n        'world':world,\n        },\n       \n// 全球地域中文映射\n\n}\n    },\n   mounted(){\n     this.getData();\n     this.chinaConfigure(this.value);\n  },\n//   更新数据\n  watch:{\n    value(newVal){\n      this.myChart.dispose();\n      this.getData();\n      this.chinaConfigure(this.value);\n    }\n  },\n   beforeDestroy() {\n    if (!this.myChart) {\n      return;\n    }\n    this.myChart.dispose();\n    this.myChart = null;\n  },\n  methods:{\n    chinaConfigure(area) {\n         this.myChart = this.$echarts.init(document.getElementById(\"charts\")); //这里是为了获得容器所在位置        \n         window.onresize = this.myChart.resize;\n         let option={ // 进行相关配置\n          backgroundColor: \"#02AFDB\",\n          tooltip: {}, // 鼠标移到图里面的浮动提示框\n          visualMap: {\n            // max: 110,\n            calculable: true,\n            inRange: {\n                color: ['#313695', '#4575b4', '#74add1', '#abd9e9', '#e0f3f8', '#ffffbf', '#fee090', '#fdae61', '#f46d43', '#d73027', '#a50026']\n              }\n                  },\n        series: [{\n        type: 'map',\n        map: 'world',\n        data: [],\n        nameMap: this.nameMap\n    }]\n        }\n        this.myChart.setOption(option,true);\n        this.myChart.on('click', params => { // 点击函数\n        this.value=params.name\n        this.myChart.setOption(option,true);\n        }) \n      },\n      getData() {\n      var that = this;\n      jsonp(that.url, (err, data) => {\n        // jsonp 在请求创建script标签发送，不受同源策略影响\n        // console.log(data.data.list);\n        let arr = data.data.list;\n        let lists = arr.map(function(e) {\n          return { name: e.location, value: e.nowdia };\n        });\n        option.series[0].data = lists;\n        that.init();\n      });\n  }\n}}\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}